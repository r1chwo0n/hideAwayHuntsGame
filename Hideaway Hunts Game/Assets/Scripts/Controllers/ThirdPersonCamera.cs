using UnityEngine;

public class ThirdPersonCameraWithCollision : MonoBehaviour
{
    public Transform target;
    public Vector3 offset = new Vector3(0f, 1.5f, -0.1f);
    public float smoothSpeed = 10f;
    public float minDistance = 0f;
    public float maxDistance = 2f;
    public LayerMask collisionMask;
    RaycastHit hit;

    void LateUpdate()
{
    // ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Ray ‚Üí ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Player (‡πÄ‡∏£‡∏≤‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏û‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô)
    Vector3 rayOrigin = target.position + Vector3.up * 1.5f;

    // ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡πÄ‡∏≠‡∏≤ offset ‡πÑ‡∏õ‡∏Ñ‡∏π‡∏ì‡∏Å‡∏±‡∏ö rotation
    Vector3 desiredCameraPos = target.position + target.rotation * offset;

    // ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å player ‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
    Vector3 direction = desiredCameraPos - rayOrigin;

    RaycastHit hit;

        // ‡∏¢‡∏¥‡∏á Ray ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏Ç‡∏ß‡∏≤‡∏á‡πÑ‡∏´‡∏°
        if (Physics.Raycast(rayOrigin, direction.normalized, out hit, direction.magnitude, collisionMask))
        {
            // üéØ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏á ‚Üí ‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏à‡∏≤‡∏Å player ‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ä‡∏ô
            Debug.DrawLine(rayOrigin, hit.point, Color.green);
            // üéØ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏á ‚Üí ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏î‡∏á ‡∏à‡∏≤‡∏Å player ‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π    
            Debug.Log("Hit: " + hit.collider.name);
    }
        else
        {
            // ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡∏±‡∏á ‚Üí ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏î‡∏á ‡∏à‡∏≤‡∏Å player ‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà
            Debug.DrawLine(rayOrigin, desiredCameraPos, Color.red);
        }

    // ‡πÅ‡∏Å‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡∏ï‡∏≤‡∏° ray hit
    float distance = maxDistance;
    if (Physics.Raycast(rayOrigin, direction.normalized, out hit, direction.magnitude, collisionMask))
    {
        distance = Mathf.Clamp(hit.distance, minDistance, maxDistance);
    }

    // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    Vector3 finalCameraPos = rayOrigin + direction.normalized * distance;

    // ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    transform.position = Vector3.Lerp(transform.position, finalCameraPos, smoothSpeed * Time.deltaTime);

    // ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
    transform.LookAt(target.position + Vector3.up * 1.5f);
}

}
